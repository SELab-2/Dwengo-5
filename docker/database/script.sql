-- SQL dump generated using DBML (dbml.dbdiagram.io)
-- Database: PostgreSQL
-- Generated at: 2025-02-25T07:58:03.594Z

-- Create the user
CREATE USER "dwengo-dev" WITH PASSWORD 'dwengo';

-- Create the database
CREATE DATABASE "dwengo-dev" OWNER "dwengo-dev";

ALTER USER "dwengo-dev" WITH SUPERUSER;

GRANT ALL PRIVILEGES ON SCHEMA public TO "dwengo-dev";
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO "dwengo-dev";
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO "dwengo-dev";
GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO "dwengo-dev";
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO "dwengo-dev";


-- Connect to the database
\c "dwengo-dev"

CREATE TYPE "content_type" AS ENUM (
  'text/plain',
  'text/markdown',
  'image/image-block',
  'image/image',
  'audio/mpeg',
  'application/pdf',
  'extern',
  'blocky'
);

CREATE TYPE "submission_type" AS ENUM (
  'multiplechoice',
  'image'
);

CREATE TABLE "students" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "username" varchar NOT NULL,
  "email" varchar UNIQUE NOT NULL,
  "password" varchar,
  "active_language" varchar NOT NULL,
  "created_at" timestamp NOT NULL
);

CREATE TABLE "teachers" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "username" varchar NOT NULL,
  "password" varchar,
  "email" varchar UNIQUE NOT NULL,
  "active_language" varchar NOT NULL,
  "created_at" timestamp NOT NULL
);

CREATE TABLE "classes" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar
);

CREATE TABLE "groups" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar,
  "class" integer NOT NULL,
  "assignment" int NOT NULL
);

CREATE TABLE "learning_paths" (
  "hruid" varchar NOT NULL,
  "uuid" uuid PRIMARY KEY,
  "language" varchar NOT NULL,
  "title" varchar,
  "description" varchar,
  "image" varchar
);

CREATE TABLE "learning_path_nodes" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "learning_object_id" varchar NOT NULL,
  "start_node" boolean,
  "learning_path" uuid NOT NULL
);

CREATE TABLE "learning_objects" (
  "_id" varchar PRIMARY KEY NOT NULL,
  "hruid" varchar NOT NULL,
  "uuid" uuid UNIQUE NOT NULL,
  "language" varchar NOT NULL,
  "version" varchar NOT NULL,
  "html_content" varchar NOT NULL
);

CREATE TABLE "transitions" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "condition" varchar,
  "default" boolean,
  "instruction" int8range,
  "next" integer
);

CREATE TABLE "learning_objects_metadata" (
  "_id" varchar PRIMARY KEY,
  "uuid" uuid UNIQUE NOT NULL,
  "version" int NOT NULL,
  "language" varchar NOT NULL,
  "title" varchar,
  "description" varchar,
  "content_type" content_type,
  "keywords" varchar[],
  "target_ages" int[],
  "teacher_exclusive" boolean NOT NULL,
  "skos_concepts" varchar[],
  "educatioanl_goals" JSON,
  "copyright" varchar,
  "license" varchar,
  "difficulty" int NOT NULL,
  "estimated_time" int NOT NULL,
  "return_value" JSON,
  "available" boolean NOT NULL,
  "content_location" varchar NOT NULL
);

CREATE TABLE "assignments" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar NOT NULL,
  "deadline" timestamp,
  "created_at" timestamp NOT NULL,
  "learning_path" uuid NOT NULL,
  "class" integer NOT NULL
);

CREATE TABLE "conversation" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "title" varchar,
  "learning_object" uuid NOT NULL,
  "teachers" integer NOT NULL,
  "group" integer NOT NULL,
  "assignment" integer NOT NULL
);

CREATE TABLE "message" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "content" varchar,
  "offset" int8range,
  "is_student" boolean NOT NULL,
  "student" integer,
  "index" integer NOT NULL,
  "conversation" integer NOT NULL
);

CREATE TABLE "submissions" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "group" integer NOT NULL,
  "assignment" integer NOT NULL,
  "submission_type" submission_type NOT NULL,
  "submission_content" JSON NOT NULL,
  "graded_by" integer
);

CREATE TABLE "notifications" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "title" varchar NOT NULL,
  "content" varchar NOT NULL,
  "read" boolean NOT NULL,
  "student" integer,
  "teacher" integer
);

COMMENT ON TABLE "students" IS 'Contians all data relevent to all student account specification
contains metadata used for frontend view to enhance user-experience
';

COMMENT ON COLUMN "students"."id" IS 'Unique auto-incrementing ID
';

COMMENT ON COLUMN "students"."username" IS 'Username used and displayed acros the application
';

COMMENT ON COLUMN "students"."email" IS 'Email used for identification
';

COMMENT ON COLUMN "students"."active_language" IS 'Active language used by user on the site
';

COMMENT ON COLUMN "students"."created_at" IS 'Creation timestamp off this user (metadata)
';

COMMENT ON TABLE "teachers" IS 'Contians all data relevent to all student account specification
contains metadata used for frontend view to enhance user-experience
';

COMMENT ON COLUMN "teachers"."id" IS 'Unique auto-incrementing ID
';

COMMENT ON COLUMN "teachers"."username" IS 'Username used and displayed acros the application
';

COMMENT ON COLUMN "teachers"."email" IS 'Email used for identification
';

COMMENT ON COLUMN "teachers"."active_language" IS 'Active language used by user on the site
';

COMMENT ON COLUMN "teachers"."created_at" IS 'Creation timestamp off this user (metadata)
';

COMMENT ON TABLE "classes" IS 'Containts info relevant to a class.
';

COMMENT ON COLUMN "classes"."id" IS 'Unique auto-incrementing ID
';

COMMENT ON COLUMN "classes"."name" IS 'Optional name for the class
';

COMMENT ON TABLE "groups" IS 'Containts info relevant to group.
Has associated class (group is unique given id combined with class).
';

COMMENT ON COLUMN "groups"."id" IS 'Unique auto-incrementing ID
';

COMMENT ON COLUMN "groups"."name" IS 'Optional name for the group
';

COMMENT ON COLUMN "groups"."class" IS 'Class associated with this group
';

COMMENT ON COLUMN "groups"."assignment" IS 'Many-to-1 relationship between groups and assignments:
1 assignment can have multiple groups, 1 group will always be associated with 1 assignment
';

COMMENT ON TABLE "learning_paths" IS 'Containts all info relevant to a learning path.
';

COMMENT ON COLUMN "learning_paths"."hruid" IS 'Unique human readable ID
';

COMMENT ON COLUMN "learning_paths"."uuid" IS 'Universal unique ID
';

COMMENT ON COLUMN "learning_paths"."language" IS 'Language of this learning path
';

COMMENT ON COLUMN "learning_paths"."title" IS 'Title of this learning path
';

COMMENT ON COLUMN "learning_paths"."description" IS 'Description of this learning path
';

COMMENT ON COLUMN "learning_paths"."image" IS 'Image encoded in this learning path (base64)
';

COMMENT ON TABLE "learning_path_nodes" IS 'Containts all info relevant to a learning path node.
Learning path node contains relation to a learning path.
';

COMMENT ON COLUMN "learning_path_nodes"."id" IS 'Unique auto-incrementing ID
';

COMMENT ON COLUMN "learning_path_nodes"."learning_object_id" IS 'Associated learning object with this node
';

COMMENT ON COLUMN "learning_path_nodes"."start_node" IS 'Whether you can start from this node or not
';

COMMENT ON COLUMN "learning_path_nodes"."learning_path" IS 'Relation to the learning path associated with this node
';

COMMENT ON TABLE "learning_objects" IS 'Containts all info relevant to a learning object.
';

COMMENT ON COLUMN "learning_objects"."_id" IS 'Unique NON-AUTO-INCREMENTING STRING ID (received from API)
';

COMMENT ON COLUMN "learning_objects"."hruid" IS 'Unique human readable ID
';

COMMENT ON COLUMN "learning_objects"."uuid" IS 'Universal unique ID
';

COMMENT ON COLUMN "learning_objects"."language" IS 'Language of this learning object
';

COMMENT ON COLUMN "learning_objects"."version" IS 'Version of this object
';

COMMENT ON COLUMN "learning_objects"."html_content" IS 'Raw HTML content representing learning object
';

COMMENT ON TABLE "transitions" IS 'Containts all info relevant to learning path node transitions.
Transition has relation to learning path nodes and learning objects (if there exists a next node).
';

COMMENT ON COLUMN "transitions"."id" IS 'Unique auto-incrementing ID
';

COMMENT ON COLUMN "transitions"."condition" IS 'Condition that needs to be met to go the the next learning object
';

COMMENT ON COLUMN "transitions"."default" IS '???
';

COMMENT ON COLUMN "transitions"."instruction" IS 'Range where grade needs to be in to be allowed to go to the next node.
';

COMMENT ON COLUMN "transitions"."next" IS '1-to-1 relation from between transition and learning path node
Relation to learning path node indicating the learning path node that is followed using this transition
';

COMMENT ON TABLE "learning_objects_metadata" IS 'Containts all metadata from learning objects.
Learning object metadata has relation to learning object.
';

COMMENT ON COLUMN "learning_objects_metadata"."_id" IS 'Unique ID

1-to-1 relationship between learning objects and their metadata:
1 learning object has 1 corresponding metadata record
';

COMMENT ON COLUMN "learning_objects_metadata"."uuid" IS 'Universal unique ID (API recieved)
';

COMMENT ON COLUMN "learning_objects_metadata"."version" IS 'The version of that specific learning object. Uniquein combination with uuid and language.
';

COMMENT ON COLUMN "learning_objects_metadata"."language" IS 'The language of the learning object.
';

COMMENT ON COLUMN "learning_objects_metadata"."title" IS 'Short description of the learning objec
';

COMMENT ON COLUMN "learning_objects_metadata"."description" IS 'Long description of the learning objec
';

COMMENT ON COLUMN "learning_objects_metadata"."content_type" IS 'This is how the content is added to the learing object repository, it does not determine the format for the user of the API.
API always returns the content in HTML format.
';

COMMENT ON COLUMN "learning_objects_metadata"."keywords" IS 'Descriptive keywords related to learning object
';

COMMENT ON COLUMN "learning_objects_metadata"."target_ages" IS 'List of target ages for the learning objects
';

COMMENT ON COLUMN "learning_objects_metadata"."teacher_exclusive" IS 'If the learning object is for teachers only
';

COMMENT ON COLUMN "learning_objects_metadata"."skos_concepts" IS 'List of uri string referring to skos metadata concepts
';

COMMENT ON COLUMN "learning_objects_metadata"."educatioanl_goals" IS 'Depending on the context, combination of the source of the educational goals (string),
for example a gouvernment website and a uniuqe id for the educational goal in that context (string).
';

COMMENT ON COLUMN "learning_objects_metadata"."copyright" IS 'copyright
';

COMMENT ON COLUMN "learning_objects_metadata"."license" IS 'licence
';

COMMENT ON COLUMN "learning_objects_metadata"."difficulty" IS 'Difficulty on scale of one to five
';

COMMENT ON COLUMN "learning_objects_metadata"."estimated_time" IS 'estimated_time number Estimated time in minutes
';

COMMENT ON COLUMN "learning_objects_metadata"."return_value" IS 'Used for deffining a return value.
- callback_url: The url to send the response of the learning object to.
- callback_schema: A json schema defining the format of the return value.
';

COMMENT ON COLUMN "learning_objects_metadata"."available" IS 'If the object is available or not
';

COMMENT ON COLUMN "learning_objects_metadata"."content_location" IS 'Only contains relevant information if the content_type “extern”.
“extern” content types refer to a website hosted somewhere online.
In this case the content_location attribute contains the link to that external content.
';

COMMENT ON TABLE "assignments" IS 'Containts all metadata from assignments.
Assignment has relation to learning path (the content) and class (that was given the assignment).
';

COMMENT ON COLUMN "assignments"."id" IS 'Unique auto-incrementing ID
';

COMMENT ON COLUMN "assignments"."name" IS 'Name off the assignment
';

COMMENT ON COLUMN "assignments"."deadline" IS 'Deadline timestamp off this assigment
';

COMMENT ON COLUMN "assignments"."created_at" IS 'Creation timestamp off this assignment (metadata)
';

COMMENT ON COLUMN "assignments"."learning_path" IS 'Many-to-1 relationship between learning paths and assignments:
1 path can be part of multiple assignments, 1 assignment always has 1 learning path
';

COMMENT ON COLUMN "assignments"."class" IS 'Many-to-1 relationship between classes and assignments:
1 class can have multiple assignments, 1 assignment is always associated with 1 class
';

COMMENT ON COLUMN "conversation"."id" IS 'Unique auto-incrementing ID
';

COMMENT ON COLUMN "conversation"."title" IS 'Title of the conversation
';

COMMENT ON COLUMN "conversation"."learning_object" IS 'Relation to the learning object relevant to the converstation
';

COMMENT ON COLUMN "conversation"."teachers" IS 'Relation to the teacher in this conversation
?? multiple teachers can enter the conversation ??
';

COMMENT ON COLUMN "conversation"."group" IS 'Relation to the group in this conversation
?? multiple groups can enter the conversation ??
';

COMMENT ON COLUMN "conversation"."assignment" IS 'Relation to the assignment that is associated with the question
';

COMMENT ON COLUMN "message"."id" IS 'Unique auto-incrementing ID
';

COMMENT ON COLUMN "message"."content" IS 'Content insiude
';

COMMENT ON COLUMN "message"."offset" IS 'Optional numerical range associated with the place in the learning object relevant to the message
(i.e. an explanation or a question about specific part).
';

COMMENT ON COLUMN "message"."is_student" IS 'Boolean indicating if this message is from a student or not
';

COMMENT ON COLUMN "message"."student" IS 'Optional relation to a student if the message coming from a student in the group
';

COMMENT ON COLUMN "message"."index" IS 'Index offset indicating the message, used to show the conversation in chronological order
';

COMMENT ON COLUMN "message"."conversation" IS 'Conversation associated with this message
';

COMMENT ON COLUMN "submissions"."id" IS 'Unique auto-incrementing ID
';

COMMENT ON COLUMN "submissions"."group" IS 'Relation to associated group
';

COMMENT ON COLUMN "submissions"."assignment" IS 'Relation to associated assignment
';

COMMENT ON COLUMN "submissions"."submission_type" IS 'Submission type, needs to be element of submission_type enum
';

COMMENT ON COLUMN "submissions"."submission_content" IS 'Content of the submission, can be of various types (JSON as shared medium)
';

COMMENT ON COLUMN "submissions"."graded_by" IS 'Reference to the teacher that graded this submission
';

COMMENT ON COLUMN "notifications"."id" IS 'Unique auto-incrementing ID
';

COMMENT ON COLUMN "notifications"."title" IS 'Title of notification
';

COMMENT ON COLUMN "notifications"."content" IS 'Content of notification
';

COMMENT ON COLUMN "notifications"."read" IS 'Boolean if message has been read
';

COMMENT ON COLUMN "notifications"."student" IS 'Optional student that needs to see this notification (exclusive)
';

COMMENT ON COLUMN "notifications"."teacher" IS 'Optional teacher that needs to see this notification (exclusive)
';

ALTER TABLE "groups" ADD FOREIGN KEY ("class") REFERENCES "classes" ("id");

ALTER TABLE "groups" ADD FOREIGN KEY ("assignment") REFERENCES "assignments" ("id");

ALTER TABLE "learning_path_nodes" ADD FOREIGN KEY ("learning_object_id") REFERENCES "learning_objects" ("_id");

ALTER TABLE "learning_path_nodes" ADD FOREIGN KEY ("learning_path") REFERENCES "learning_paths" ("uuid");

ALTER TABLE "transitions" ADD FOREIGN KEY ("id") REFERENCES "learning_path_nodes" ("id");

ALTER TABLE "transitions" ADD FOREIGN KEY ("next") REFERENCES "learning_path_nodes" ("id");

ALTER TABLE "learning_objects_metadata" ADD FOREIGN KEY ("_id") REFERENCES "learning_objects" ("_id");

ALTER TABLE "assignments" ADD FOREIGN KEY ("learning_path") REFERENCES "learning_paths" ("uuid");

ALTER TABLE "assignments" ADD FOREIGN KEY ("class") REFERENCES "classes" ("id");

ALTER TABLE "conversation" ADD FOREIGN KEY ("learning_object") REFERENCES "learning_objects" ("uuid");

ALTER TABLE "conversation" ADD FOREIGN KEY ("teachers") REFERENCES "teachers" ("id");

ALTER TABLE "conversation" ADD FOREIGN KEY ("group") REFERENCES "groups" ("id");

ALTER TABLE "conversation" ADD FOREIGN KEY ("assignment") REFERENCES "assignments" ("id");

ALTER TABLE "message" ADD FOREIGN KEY ("student") REFERENCES "students" ("id");

ALTER TABLE "message" ADD FOREIGN KEY ("conversation") REFERENCES "conversation" ("id");

ALTER TABLE "submissions" ADD FOREIGN KEY ("group") REFERENCES "groups" ("id");

ALTER TABLE "submissions" ADD FOREIGN KEY ("assignment") REFERENCES "assignments" ("id");

ALTER TABLE "submissions" ADD FOREIGN KEY ("graded_by") REFERENCES "teachers" ("id");

ALTER TABLE "notifications" ADD FOREIGN KEY ("student") REFERENCES "students" ("id");

ALTER TABLE "notifications" ADD FOREIGN KEY ("teacher") REFERENCES "teachers" ("id");

CREATE TABLE "classes_students" (
  "classes_id" integer,
  "students_id" integer,
  PRIMARY KEY ("classes_id", "students_id")
);

ALTER TABLE "classes_students" ADD FOREIGN KEY ("classes_id") REFERENCES "classes" ("id");

ALTER TABLE "classes_students" ADD FOREIGN KEY ("students_id") REFERENCES "students" ("id");


CREATE TABLE "classes_teachers" (
  "classes_id" integer,
  "teachers_id" integer,
  PRIMARY KEY ("classes_id", "teachers_id")
);

ALTER TABLE "classes_teachers" ADD FOREIGN KEY ("classes_id") REFERENCES "classes" ("id");

ALTER TABLE "classes_teachers" ADD FOREIGN KEY ("teachers_id") REFERENCES "teachers" ("id");


CREATE TABLE "learning_paths_learning_objects" (
  "learning_paths_uuid" uuid,
  "learning_objects_uuid" uuid,
  PRIMARY KEY ("learning_paths_uuid", "learning_objects_uuid")
);

ALTER TABLE "learning_paths_learning_objects" ADD FOREIGN KEY ("learning_paths_uuid") REFERENCES "learning_paths" ("uuid");

ALTER TABLE "learning_paths_learning_objects" ADD FOREIGN KEY ("learning_objects_uuid") REFERENCES "learning_objects" ("uuid");


CREATE TABLE "teachers_assignments" (
  "teachers_id" integer,
  "assignments_id" integer,
  PRIMARY KEY ("teachers_id", "assignments_id")
);

ALTER TABLE "teachers_assignments" ADD FOREIGN KEY ("teachers_id") REFERENCES "teachers" ("id");

ALTER TABLE "teachers_assignments" ADD FOREIGN KEY ("assignments_id") REFERENCES "assignments" ("id");


CREATE TABLE "students_learning_objects" (
  "students_id" integer,
  "learning_objects__id" varchar,
  PRIMARY KEY ("students_id", "learning_objects__id")
);

ALTER TABLE "students_learning_objects" ADD FOREIGN KEY ("students_id") REFERENCES "students" ("id");

ALTER TABLE "students_learning_objects" ADD FOREIGN KEY ("learning_objects__id") REFERENCES "learning_objects" ("_id");


CREATE TABLE "students_groups" (
  "students_id" integer,
  "groups_id" integer,
  PRIMARY KEY ("students_id", "groups_id")
);

ALTER TABLE "students_groups" ADD FOREIGN KEY ("students_id") REFERENCES "students" ("id");

ALTER TABLE "students_groups" ADD FOREIGN KEY ("groups_id") REFERENCES "groups" ("id");

