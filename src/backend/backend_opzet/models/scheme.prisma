// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Content_type {
    HIER_KOMEN_ALLE_TYPES
}

model Learning_object_meta_data {
    id                String       @id @default(uuid())
    uuid              String       @default(uuid())
    version           Int
    language          String
    title             String
    description       String
    content_type      Content_type
    keywords          String[]
    target_ages       Int[]
    teacher_exclusive Boolean
    skos_concepts     String[]
    educational_goals Json[]
    copyright         String
    license           String
    difficulty        Int
    estimated_time    Int
    return_value      Json
    available         Boolean
    content_location  String

    learning_object Learning_object? // 1-op-1 relatie met Learning_object
}

model Learning_path {
    hruid              String
    uuid               Int                  @id @default(autoincrement())
    language           String
    title              String
    description        String
    image              String
    assignment         Assignment[]
    learning_path_node Learning_path_node[]
}

model Learning_object {
    id           String @id @default(uuid()) @map("id") // Must match Learning_object_meta_data.id
    hruid        String
    uuid         Int
    language     String
    version      String
    html_content String

    metadata           Learning_object_meta_data @relation(fields: [id], references: [id])
    conversation       Conversation[]
    learning_path_node Learning_path_node[]
}

model Learning_path_node {
    id                Int             @id @default(autoincrement())
    learningObject    Learning_object @relation(fields: [learningObjectId], references: [id])
    learningObjectId  String
    instruction       String
    start_node        Boolean
    learning_path     Learning_path   @relation(fields: [learning_pathUuid], references: [uuid])
    learning_pathUuid Int

    // One-to-one relation with Transition
    transition Transition?
}

model Transition {
    id        Int     @id @map("id") // Primary key + foreign key
    condition String
    default   Boolean

    // One-to-one relation referencing Learning_path_node.id
    node Learning_path_node @relation(fields: [id], references: [id])
}

model Student {
    id              Int      @id @default(autoincrement())
    username        String
    email           String   @unique
    password        String
    active_language String
    created_at      DateTime

    // @@index([email])
    class   Class?    @relation(fields: [classId], references: [id])
    classId Int?
    message Message[]
}

model Teacher {
    id              Int      @id @default(autoincrement())
    username        String
    email           String   @unique
    password        String
    active_language String
    created_at      DateTime

    // @@index([email])
    class          Class?        @relation(fields: [classId], references: [id])
    classId        Int?
    conversation   Conversation? @relation(fields: [conversationId], references: [id])
    conversationId Int?
}

model Class {
    id         Int          @id @default(autoincrement())
    name       String
    teachers   Teacher[]
    students   Student[]
    group      Group[]
    assignment Assignment[]
}

model Assignment {
    id              Int            @id @default(autoincrement())
    name            String
    deadline        DateTime
    created_at      DateTime
    Learning_path   Learning_path  @relation(fields: [learning_pathId], references: [uuid])
    learning_pathId Int
    class           Class          @relation(fields: [classId], references: [id])
    classId         Int
    group           Group[]
    conversation    Conversation[]
}

model Group {
    id           Int            @id @default(autoincrement())
    name         String
    class        Class          @relation(fields: [classId], references: [id])
    classId      Int
    Assignment   Assignment     @relation(fields: [assignmentId], references: [id])
    assignmentId Int
    Conversation Conversation[]
}

model Conversation {
    id               Int             @id @default(autoincrement())
    title            String
    learningObject   Learning_object @relation(fields: [learningObjectId], references: [id])
    learningObjectId String
    teachers         Teacher[]
    group            Group           @relation(fields: [groupId], references: [id])
    groupId          Int
    Assignment       Assignment      @relation(fields: [assignmentId], references: [id])
    assignmentId     Int
    message          Message[]
}

model Message {
    id             Int          @id @default(autoincrement())
    content        String
    offset         Int
    isStudent      Boolean
    Student        Student      @relation(fields: [studentId], references: [id])
    studentId      Int
    index          Int
    conversation   Conversation @relation(fields: [conversationId], references: [id])
    conversationId Int
}
